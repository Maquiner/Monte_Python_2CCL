#------Experiments to test (separated with commas)-----

data.experiments=['DESI_dA']

#------ Settings for the over-sampling. The first element will always be set to
# 1, for it is the sampling of the cosmological parameters. The other numbers
# describe the over sampling of the nuisance parameter space. This array must
# have the same dimension as the number of blocks in your run (so, 1 for
# cosmological parameters, and then 1 for each experiment with varying nuisance
# parameters).
#data.over_sampling=[1, 4]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo' or 'nuisance'

# Cosmological parameters list
# main parameters to extract:

data.parameters['h']        = [ 0.685000, 0.64, 0.82,    0.0065,  1.,  'cosmo']
data.parameters['Omega_c']  = [ 0.250000, 0.01, 0.9,     0.02,    1.,  'cosmo']
data.parameters['Omega_b']  = [ 0.047900, 0.01, 0.1,     0.002,    1.,  'cosmo']
#data.parameters['sigma8']   = [ 0.805000, 0.70, 0.88,    0.002,   1.,  'cosmo']
#data.parameters['n_s']      = [ 0.96229,  0.7,  1.3,     0.0074,  1.,  'cosmo']
data.parameters['w_0']      = [-1.000000, -1,   1,       0.2,     1.,  'cosmo']
data.parameters['w_a']      = [ 0.000000, -1,   1,       0.02,    1.,  'cosmo']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

# fix main cosmology to Planck:
data.cosmo_arguments['Omega_k'] = 0.

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that these
# three species contribute equally
# to the radiation density at large
# redshift, with a total of Neff=3.046
#data.cosmo_arguments['m_nu'] = 0.06
#data.cosmo_arguments['T_CMB'] = 0.71611

#------- Nuisance -----

data.parameters['D_z0.00'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z0.15'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z0.30'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z0.45'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z0.60'] = [ 0., 0, 1, 0, 1, 'derived']

data.parameters['D_z0.75'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z0.90'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z1.05'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z1.20'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z1.35'] = [ 0., 0, 1, 0, 1, 'derived']

data.parameters['D_z1.50'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z1.65'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z1.80'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z1.95'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z2.10'] = [ 0., 0, 1, 0, 1, 'derived']

data.parameters['D_z2.25'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z2.40'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z2.55'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z2.70'] = [ 0., 0, 1, 0, 1, 'derived']
data.parameters['D_z2.85'] = [ 0., 0, 1, 0, 1, 'derived']


# only needed for regular MCMC:
data.write_step = 1
